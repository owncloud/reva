// Copyright 2018-2022 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	indexer "github.com/cs3org/owncloud/v2/pkg/storage/utils/indexer"
	mock "github.com/stretchr/testify/mock"

	option "github.com/cs3org/owncloud/v2/pkg/storage/utils/indexer/option"
)

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

type Indexer_Expecter struct {
	mock *mock.Mock
}

func (_m *Indexer) EXPECT() *Indexer_Expecter {
	return &Indexer_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: t
func (_m *Indexer) Add(t interface{}) ([]indexer.IdxAddResult, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 []indexer.IdxAddResult
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]indexer.IdxAddResult, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []indexer.IdxAddResult); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]indexer.IdxAddResult)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Indexer_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Indexer_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - t interface{}
func (_e *Indexer_Expecter) Add(t interface{}) *Indexer_Add_Call {
	return &Indexer_Add_Call{Call: _e.mock.On("Add", t)}
}

func (_c *Indexer_Add_Call) Run(run func(t interface{})) *Indexer_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Indexer_Add_Call) Return(_a0 []indexer.IdxAddResult, _a1 error) *Indexer_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Indexer_Add_Call) RunAndReturn(run func(interface{}) ([]indexer.IdxAddResult, error)) *Indexer_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddIndex provides a mock function with given fields: t, indexBy, pkName, entityDirName, indexType, bound, caseInsensitive
func (_m *Indexer) AddIndex(t interface{}, indexBy option.IndexBy, pkName string, entityDirName string, indexType string, bound *option.Bound, caseInsensitive bool) error {
	ret := _m.Called(t, indexBy, pkName, entityDirName, indexType, bound, caseInsensitive)

	if len(ret) == 0 {
		panic("no return value specified for AddIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, option.IndexBy, string, string, string, *option.Bound, bool) error); ok {
		r0 = rf(t, indexBy, pkName, entityDirName, indexType, bound, caseInsensitive)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Indexer_AddIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIndex'
type Indexer_AddIndex_Call struct {
	*mock.Call
}

// AddIndex is a helper method to define mock.On call
//   - t interface{}
//   - indexBy option.IndexBy
//   - pkName string
//   - entityDirName string
//   - indexType string
//   - bound *option.Bound
//   - caseInsensitive bool
func (_e *Indexer_Expecter) AddIndex(t interface{}, indexBy interface{}, pkName interface{}, entityDirName interface{}, indexType interface{}, bound interface{}, caseInsensitive interface{}) *Indexer_AddIndex_Call {
	return &Indexer_AddIndex_Call{Call: _e.mock.On("AddIndex", t, indexBy, pkName, entityDirName, indexType, bound, caseInsensitive)}
}

func (_c *Indexer_AddIndex_Call) Run(run func(t interface{}, indexBy option.IndexBy, pkName string, entityDirName string, indexType string, bound *option.Bound, caseInsensitive bool)) *Indexer_AddIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(option.IndexBy), args[2].(string), args[3].(string), args[4].(string), args[5].(*option.Bound), args[6].(bool))
	})
	return _c
}

func (_c *Indexer_AddIndex_Call) Return(_a0 error) *Indexer_AddIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Indexer_AddIndex_Call) RunAndReturn(run func(interface{}, option.IndexBy, string, string, string, *option.Bound, bool) error) *Indexer_AddIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: t
func (_m *Indexer) Delete(t interface{}) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Indexer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Indexer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - t interface{}
func (_e *Indexer_Expecter) Delete(t interface{}) *Indexer_Delete_Call {
	return &Indexer_Delete_Call{Call: _e.mock.On("Delete", t)}
}

func (_c *Indexer_Delete_Call) Run(run func(t interface{})) *Indexer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Indexer_Delete_Call) Return(_a0 error) *Indexer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Indexer_Delete_Call) RunAndReturn(run func(interface{}) error) *Indexer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindBy provides a mock function with given fields: t, fields
func (_m *Indexer) FindBy(t interface{}, fields ...indexer.Field) ([]string, error) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, t)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindBy")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, ...indexer.Field) ([]string, error)); ok {
		return rf(t, fields...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, ...indexer.Field) []string); ok {
		r0 = rf(t, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, ...indexer.Field) error); ok {
		r1 = rf(t, fields...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Indexer_FindBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBy'
type Indexer_FindBy_Call struct {
	*mock.Call
}

// FindBy is a helper method to define mock.On call
//   - t interface{}
//   - fields ...indexer.Field
func (_e *Indexer_Expecter) FindBy(t interface{}, fields ...interface{}) *Indexer_FindBy_Call {
	return &Indexer_FindBy_Call{Call: _e.mock.On("FindBy",
		append([]interface{}{t}, fields...)...)}
}

func (_c *Indexer_FindBy_Call) Run(run func(t interface{}, fields ...indexer.Field)) *Indexer_FindBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]indexer.Field, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(indexer.Field)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Indexer_FindBy_Call) Return(_a0 []string, _a1 error) *Indexer_FindBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Indexer_FindBy_Call) RunAndReturn(run func(interface{}, ...indexer.Field) ([]string, error)) *Indexer_FindBy_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexer creates a new instance of Indexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Indexer {
	mock := &Indexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
